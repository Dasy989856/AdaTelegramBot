package telegram

import (
	"AdaTelegramBot/internal/models"
	"AdaTelegramBot/internal/sdk"
	"fmt"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
func (b *BotTelegram) handlerMessage(msg *tgbotapi.Message) error {
	userId := msg.Chat.ID
	step, err := b.db.GetStepUser(userId)
	if err != nil {
		return err
	}

	// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—é—Ç—Å—è –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—è—Å—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	switch step {
	case "ad_event.create.partner":
		if err := adEventPartner(b, msg); err != nil {
			return err
		}
	case "ad_event.create.chanel":
		if err := adEventChanel(b, msg); err != nil {
			return err
		}
	case "ad_event.create.price":
		if err := adEventPrice(b, msg); err != nil {
			return err
		}
	case "ad_event.create.date_posting":
		if err := adEventDatePosting(b, msg); err != nil {
			return err
		}
	case "ad_event.create.date_delete":
		if err := adEventDateDelete(b, msg); err != nil {
			return err
		}
	case "ad_event.detele":
		if err := adEventDelete(b, msg); err != nil {
			return err
		}

	default:
		botMsg := tgbotapi.NewMessage(userId, "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ... üòî")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}

	}

	return nil
}

func adEventPartner(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxUrlType1.MatchString(msg.Text) && !models.RegxUrlType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		–ü—Ä–∏–º–µ—Ä: @AdaTelegramBot –∏–ª–∏ https://t.me/AdaTelegramBot`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–Ω—ã–π —Ç–∏–ø.
	if models.RegxUrlType2.MatchString(msg.Text) {
		msg.Text = "https://t.me/" + msg.Text[1:]
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	adEvent.Partner = msg.Text
	b.db.SetStepUser(userId, "ad_event.create.chanel")

	botMsg := tgbotapi.NewMessage(userId, "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	switch adEvent.Type {
	case models.TypeSale:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –í–∞–º–∏ –∫–∞–Ω–∞–ª.")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–π–¥–µ—Ç –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞.")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeMutual:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –≤–∑–∞–∏–º–Ω—ã–π –ø–∏–∞—Ä.")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	return nil
}

func adEventChanel(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxUrlType1.MatchString(msg.Text) && !models.RegxUrlType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		–ü—Ä–∏–º–µ—Ä: @AdaTelegramBot –∏–ª–∏ https://t.me/AdaTelegramBot`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–Ω—ã–π —Ç–∏–ø.
	if models.RegxUrlType2.MatchString(msg.Text) {
		msg.Text = "https://t.me/" + msg.Text[1:]
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	adEvent.Channel = msg.Text

	if adEvent.Type == models.TypeMutual {
		b.db.SetStepUser(userId, "ad_event.create.date_posting")
	} else {
		b.db.SetStepUser(userId, "ad_event.create.price")
	}

	botMsg := tgbotapi.NewMessage(userId, "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	switch adEvent.Type {
	case models.TypeSale:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeMutual:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞.
		–ü—Ä–∏–º–µ—Ä: 22.08.2022 16:30`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	return nil
}

func adEventPrice(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxPrice.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		–ü—Ä–∏–º–µ—Ä: 1000`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	price, err := strconv.ParseInt(msg.Text, 0, 64)
	if err != nil {
		return err
	}

	adEvent.Price = price
	b.db.SetStepUser(userId, "ad_event.create.date_posting")

	botMsg := tgbotapi.NewMessage(userId, "–¶–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	switch adEvent.Type {
	case models.TypeSale:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
		–ü—Ä–∏–º–µ—Ä: 22.08.2022 16:30`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
		–ü—Ä–∏–º–µ—Ä: 22.08.2022 16:30`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeMutual:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞.
		–ü—Ä–∏–º–µ—Ä: 22.08.2022 16:30`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	return nil
}

func adEventDatePosting(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		–ü—Ä–∏–º–µ—Ä: 22.08.2022 16:30`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	adEvent.DatePosting = msg.Text
	b.db.SetStepUser(userId, "ad_event.create.date_delete")

	botMsg := tgbotapi.NewMessage(userId, "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	switch adEvent.Type {
	case models.TypeSale:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
		–§–æ—Ä–º–∞—Ç 22.08.2022 16:30`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
		–§–æ—Ä–º–∞—Ç 22.08.2022 16:30`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeMutual:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞.
		–§–æ—Ä–º–∞—Ç 22.08.2022 16:30`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	return nil
}

func adEventDateDelete(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: 22.08.2022 16:30")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	adEvent.DateDelete = msg.Text

	// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å—Ç–∏–Ω–≥–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è.
	durationDatePosting, err := sdk.ParseDateToTime(adEvent.DatePosting)
	if err != nil {
		return fmt.Errorf("error parse durationDatePosting: %w", err)
	}

	durationDateDelete, err := sdk.ParseDateToTime(adEvent.DateDelete)
	if err != nil {
		return fmt.Errorf("error parse durationDateDelete: %w", err)
	}

	if durationDateDelete.Sub(*durationDatePosting) <= 0 {
		botMsg := tgbotapi.NewMessage(userId, "–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –º–µ–Ω—å—à–µ –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –û—Ç–≤–µ—Ç.
	switch adEvent.Type {
	case models.TypeSale:
		botMsg := tgbotapi.NewMessage(userId, `–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		botMsg := tgbotapi.NewMessage(userId, `–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeMutual:
		botMsg := tgbotapi.NewMessage(userId, `–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!`)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	// –ü–æ–∫–∞–∑–∞—Ç—å ad —Å–æ–±—ã—Ç–∏–µ.
	{
		botMsgText := createAdEventDescriptionText(adEvent)
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–î–∞.", "ad_event.create.end"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å.", "start"),
			),
		)
		botMsg := tgbotapi.NewMessage(userId, botMsgText)
		botMsg.ReplyMarkup = keyboard
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	}

	return nil
}

// TODO no work
func adEventDelete(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxID.MatchString(msg.Text) {
		botMsgText := `
		–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		–ü—Ä–∏–º–µ—Ä: 1.`
		botMsg := tgbotapi.NewMessage(userId, botMsgText)
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	adEventId, err := strconv.ParseInt(msg.Text, 0, 64)
	if err != nil {
		return fmt.Errorf("error passing adEventId: %w", err)
	}

	adEvent, err := b.db.GetAdEvent(adEventId)
	if err != nil {
		return err
	}

	// –ü–æ–∫–∞–∑–∞—Ç—å ad —Å–æ–±—ã—Ç–∏–µ.
	{
		botMsgText := createAdEventDescriptionText(adEvent)
		botMsgText = botMsgText + "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —Å–æ–±—ã—Ç–∏–µ–º?"
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–î–∞.", "ad_event.create.end"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å.", "start"),
			),
		)
		botMsg := tgbotapi.NewMessage(userId, botMsgText)
		botMsg.ReplyMarkup = keyboard
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	}

	return nil
}
