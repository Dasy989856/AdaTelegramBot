package telegram

import (
	"AdaTelegramBot/internal/models"
	"AdaTelegramBot/internal/sdk"
	"fmt"
	"log"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
func (b *BotTelegram) handlerMessage(msg *tgbotapi.Message) error {
	userId := msg.Chat.ID
	fmt.Printf("Info %s: userId=%d; MSG=%s;\n", time.Now().Format("2006-01-02 15:04:05.999"), userId, msg.Text)
	step, err := b.db.GetStepUser(userId)
	if err != nil {
		return err
	}

	// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—é—Ç—Å—è –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—è—Å—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	switch step {
	case "ad_event.create.partner":
		if err := adEventPartner(b, msg); err != nil {
			log.Println("error in adEventPartner: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.create.chanel":
		if err := adEventChanel(b, msg); err != nil {
			log.Println("error in adEventChanel: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.create.price":
		if err := adEventPrice(b, msg); err != nil {
			log.Println("error in adEventPrice: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.create.date_posting":
		if err := adEventDatePosting(b, msg); err != nil {
			log.Println("error in adEventDatePosting: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}
	case "ad_event.create.date_delete":
		if err := adEventDateDelete(b, msg); err != nil {
			log.Println("error in adEventDateDelete: ", err)
			b.sendRequestRestartMsg(userId)
			return err
		}

	default:
		botMsg := tgbotapi.NewMessage(userId, "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ... üòî")
		botMsg.ParseMode = tgbotapi.ModeHTML
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "start"),
			),
		)
		botMsg.ReplyMarkup = keyboard

		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}

	}

	return nil
}

func adEventPartner(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxUrlType1.MatchString(msg.Text) && !models.RegxUrlType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		<b>–ü—Ä–∏–º–µ—Ä:</b> @AdaTelegramBot –∏–ª–∏ https://t.me/AdaTelegramBot`)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–Ω—ã–π —Ç–∏–ø.
	if models.RegxUrlType2.MatchString(msg.Text) {
		msg.Text = "https://t.me/" + msg.Text[1:]
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}

	adEvent.Partner = msg.Text
	b.db.SetStepUser(userId, "ad_event.create.chanel")

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	switch adEvent.Type {
	case models.TypeSale:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –í–∞–º–∏ –∫–∞–Ω–∞–ª.")
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–π–¥–µ—Ç –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞.")
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeMutual:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, —Å –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –≤–∑–∞–∏–º–Ω—ã–π –ø–∏–∞—Ä.")
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	return nil
}

func adEventChanel(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxUrlType1.MatchString(msg.Text) && !models.RegxUrlType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		<b>–ü—Ä–∏–º–µ—Ä:</b> @AdaTelegramBot –∏–ª–∏ https://t.me/AdaTelegramBot`)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–Ω—ã–π —Ç–∏–ø.
	if models.RegxUrlType2.MatchString(msg.Text) {
		msg.Text = "https://t.me/" + msg.Text[1:]
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}

	adEvent.Channel = msg.Text
	b.db.SetStepUser(userId, "ad_event.create.price")

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	switch adEvent.Type {
	case models.TypeSale:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		botMsg := tgbotapi.NewMessage(userId, "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.")
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeMutual:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å—Ç–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞.
		<b>–ü—Ä–∏–º–µ—Ä:</b> 0 (–ï—Å–ª–∏ –≤–∑–∞–∏–º–Ω—ã–π –ø–∏–∞—Ä –±—ã–ª –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã)
		–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å <b>'-—Å—É–º–º–∞'</b> –µ—Å–ª–∏ –±—ã–ª–∞ –¥–æ–ø–ª–∞—Ç–∞ —Å –í–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã.
		–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å <b>'+—Å—É–º–º–∞'</b> –µ—Å–ª–∏ –¥–æ–ø–ª–∞—Ç–∏–ª–∏ –í–∞–º.`)
		// botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞.
		// <b>–ü—Ä–∏–º–µ—Ä:</b> `+sdk.ParseTimeToDate(time.Now()))
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	return nil
}

func adEventPrice(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxPrice.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		<b>–ü—Ä–∏–º–µ—Ä:</b> 1000`)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}

	price, err := strconv.ParseInt(msg.Text, 0, 64)
	if err != nil {
		return err
	}

	adEvent.Price = price
	b.db.SetStepUser(userId, "ad_event.create.date_posting")

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–¶–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	exampleDate, err := getTextExampleDate()
	if err != nil {
		return err
	}
	switch adEvent.Type {
	case models.TypeSale:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeMutual:
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	return nil
}

func adEventDatePosting(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	exampleDate, err := getTextExampleDate()
	if err != nil {
		return err
	}
	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}
	adEvent.DatePosting = msg.Text

	botMsg := tgbotapi.NewMessage(userId, "üéâ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>")
	botMsg.ParseMode = tgbotapi.ModeHTML
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	switch adEvent.Type {
	case models.TypeSale:
		b.db.SetStepUser(userId, "ad_event.create.date_delete")
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è ad —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
		if err := adEventCreateLastMessage(b, userId, adEvent); err != nil {
			return err
		}
	case models.TypeMutual:
		b.db.SetStepUser(userId, "ad_event.create.date_delete")
		botMsg := tgbotapi.NewMessage(userId, `–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	return nil
}

func adEventDateDelete(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	exampleDate, err := getTextExampleDate()
	if err != nil {
		return err
	}
	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, `–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
		`+exampleDate)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := b.getAdEventCreatingCache(userId)
	if err != nil {
		return err
	}
	adEvent.DateDelete = msg.Text

	// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è.
	durationDatePosting, err := sdk.ParseUserDateToTime(adEvent.DatePosting)
	if err != nil {
		return fmt.Errorf("error parse durationDatePosting: %w", err)
	}

	durationDateDelete, err := sdk.ParseUserDateToTime(adEvent.DateDelete)
	if err != nil {
		return fmt.Errorf("error parse durationDateDelete: %w", err)
	}

	if durationDateDelete.Sub(durationDatePosting) <= 0 {
		botMsg := tgbotapi.NewMessage(userId, "–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –º–µ–Ω—å—à–µ –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –û—Ç–≤–µ—Ç.
	switch adEvent.Type {
	case models.TypeSale:
		botMsg := tgbotapi.NewMessage(userId, `üéâ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>`)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeBuy:
		botMsg := tgbotapi.NewMessage(userId, `üéâ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>`)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case models.TypeMutual:
		botMsg := tgbotapi.NewMessage(userId, `üéâ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>`)
		botMsg.ParseMode = tgbotapi.ModeHTML
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := b.sendRequestRestartMsg(userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è ad —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
	if err := adEventCreateLastMessage(b, userId, adEvent); err != nil {
		return err
	}

	return nil
}

func adEventCreateLastMessage(b *BotTelegram, userId int64, adEvent *models.AdEvent) error {
	text := "<b>‚úçÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ?</b>"
	text = text + createTextAdEventDescription(adEvent)
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–∞", "ad_event.create.end"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å", "start"),
		),
	)
	botMsg := tgbotapi.NewMessage(userId, text)
	botMsg.ParseMode = tgbotapi.ModeHTML
	botMsg.ReplyMarkup = keyboard
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}
	return nil
}
