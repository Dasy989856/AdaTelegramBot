package telegram

import (
	"AdaTelegramBot/internal/models"
	"AdaTelegramBot/internal/sdk"
	"fmt"
	"time"
)

func createStaticsBriefText(d *models.DataForStatistics) string {
	return fmt.Sprintf(`
	<b>      üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
<b>–ü—Ä–æ–¥–∞–Ω–æ —Ä–µ–∫–ª–∞–º:</b> %d
<b>–ö—É–ø–ª–µ–Ω–æ —Ä–µ–∫–ª–∞–º:</b> %d
<b>–ö–æ–ª-–≤–æ –≤–∑–∞–∏–º–Ω—ã—Ö –ø–∏–∞—Ä–æ–≤:</b> %d
<b>–ö–æ–ª-–≤–æ –±–∞—Ä—Ç–µ—Ä–æ–≤:</b> %d
<b>–ü—Ä–∏–±—ã–ª—å:</b> %d
<b>–¢—Ä–∞—Ç—ã:</b> %d
<b>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</b> %d
`, d.CountAdEventSale, d.CountAdEventBuy, d.CountAdEventMutaul, d.CountAdEventBarter, d.Profit, d.Losses, d.Profit-d.Losses)
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç-–æ–ø–∏—Å–∞–Ω–∏—è ad —Å–æ–±—ã—Ç–∏—è.
func createTextAdEventDescription(a *models.AdEvent) (descriptionAdEvent string) {
	switch a.Type {
	case models.TypeSale:
		descriptionAdEvent = fmt.Sprintf(`
		- <b>–¢–∏–ø:</b> <u>–ø—Ä–æ–¥–∞–∂–∞ —Ä–µ–∫–ª–∞–º—ã</u>
		- <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> %s
		- <b>–ö–∞–Ω–∞–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b> %s
		- <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> %s
		- <b>–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è:</b> %s`, a.Partner, a.Channel, a.Price, a.DatePosting, a.DateDelete)
		if a.ArrivalOfSubscribers != 0 {
			descriptionAdEvent = descriptionAdEvent + fmt.Sprintf(`
			-<b>–ü—Ä–∏—Ö–æ–¥ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> %d`, a.ArrivalOfSubscribers)
		}
	case models.TypeBuy:
		descriptionAdEvent = fmt.Sprintf(`
		- <b>–¢–∏–ø:</b> <u>–ø–æ–∫—É–ø–∫–∞ —Ä–µ–∫–ª–∞–º—ã</u>
		- <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> %s
		- <b>–ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> %s
		- <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> %s`, a.Partner, a.Channel, a.Price, a.DatePosting)
		if a.ArrivalOfSubscribers != 0 {
			descriptionAdEvent = descriptionAdEvent + fmt.Sprintf(`
			-<b>–ü—Ä–∏—Ö–æ–¥ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> %d`, a.ArrivalOfSubscribers)
		}
	case models.TypeMutual:
		descriptionAdEvent = fmt.Sprintf(`
		- <b>–¢–∏–ø:</b> <u>–≤–∑–∞–∏–º–Ω—ã–π –ø–∏–∞—Ä</u>
		- <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> %s
		- <b>–ö–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞:</b> %s
		- <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> %s
		- <b>–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è:</b> %s`, a.Partner, a.Channel, a.Price, a.DatePosting, a.DateDelete)
		if a.ArrivalOfSubscribers != 0 {
			descriptionAdEvent = descriptionAdEvent + fmt.Sprintf(`
			-<b>–ü—Ä–∏—Ö–æ–¥ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> %d`, a.ArrivalOfSubscribers)
		}
	case models.TypeBarter:
		descriptionAdEvent = fmt.Sprintf(`
		- <b>–¢–∏–ø:</b> <u>–±–∞—Ä—Ç–µ—Ä</u>
		- <b>–ü–∞—Ä—Ç–Ω–µ—Ä:</b> %s
		- <b>–ö–∞–Ω–∞–ª/–º–∞–≥–∞–∑–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä–∞:</b> %s
		- <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:</b> %s`, a.Partner, a.Channel, a.Price, a.DatePosting)
		if a.ArrivalOfSubscribers != 0 {
			descriptionAdEvent = descriptionAdEvent + fmt.Sprintf(`
			-<b>–ü—Ä–∏—Ö–æ–¥ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> %d`, a.ArrivalOfSubscribers)
		}
	}

	return descriptionAdEvent
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã.
func createTextAlertForAdEventPosting(a *models.AdEvent, minutesLeftAlert int64) (descriptionAdEvent string) {
	switch a.Type {
	case models.TypeSale:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s –í—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		`+createTextAdEventDescription(a), getTextTime(minutesLeftAlert))
	case models.TypeBuy:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		`+createTextAdEventDescription(a), getTextTime(minutesLeftAlert))
	case models.TypeMutual:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s —É –í–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è –≤–∑–∞–∏–º–Ω—ã–π –ø–∏–∞—Ä. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		`+createTextAdEventDescription(a), getTextTime(minutesLeftAlert))
	case models.TypeMutual:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s –í—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –±–∞—Ä—Ç–µ—Ä. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		`+createTextAdEventDescription(a), getTextTime(minutesLeftAlert))
	}

	return descriptionAdEvent
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã.
func createTextAlertForAdEventPostingOld(a *models.AdEvent, minutesLeftAlert int64) (descriptionAdEvent string) {
	switch a.Type {
	case models.TypeSale:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s –í—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		- <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> %s
		- <b>–ö–∞–Ω–∞–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b> %s
		- <b>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		- <b>–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		`, getTextTime(minutesLeftAlert), a.Partner, a.Channel, a.Price, a.DatePosting, a.DateDelete)
	case models.TypeBuy:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		- <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> %s
		- <b>–ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> %s
		- <b>–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		`, getTextTime(minutesLeftAlert), a.Partner, a.Channel, a.Price, a.DatePosting)
	case models.TypeMutual:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s —É –í–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è –≤–∑–∞–∏–º–Ω—ã–π –ø–∏–∞—Ä. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		- <b>–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ –≤–∑–∞–∏–º–Ω–æ–º—É –ø–∏–∞—Ä—É:</b> %s
		- <b>–ö–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –≤–∑–∞–∏–º–Ω–æ–º—É –ø–∏–∞—Ä—É:</b> %s
		- <b>–¶–µ–Ω–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		- <b>–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		`, getTextTime(minutesLeftAlert), a.Partner, a.Channel, a.Price, a.DatePosting, a.DateDelete)
	}

	return descriptionAdEvent
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã.
func createTextAlertForAdEventDelete(a *models.AdEvent, minutesLeftAlert int64) (descriptionAdEvent string) {
	switch a.Type {
	case models.TypeSale:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s –í—ã –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		`+createTextAdEventDescription(a), getTextTime(minutesLeftAlert))
	case models.TypeBuy:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		`+createTextAdEventDescription(a), getTextTime(minutesLeftAlert))
	case models.TypeMutual:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s —É –í–∞—Å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤–∑–∞–∏–º–Ω—ã–π –ø–∏–∞—Ä. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		`+createTextAdEventDescription(a), getTextTime(minutesLeftAlert))
	case models.TypeBarter:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s —É –í–∞—Å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –±–∞—Ä—Ç–µ—Ä. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		`+createTextAdEventDescription(a), getTextTime(minutesLeftAlert))
	}

	return descriptionAdEvent
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã.
func createTextAlertForAdEventDeleteOld(a *models.AdEvent, minutesLeftAlert int64) (descriptionAdEvent string) {
	switch a.Type {
	case models.TypeSale:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s –í—ã –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		- <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> %s
		- <b>–ö–∞–Ω–∞–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b> %s
		- <b>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		- <b>–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		`, getTextTime(minutesLeftAlert), a.Partner, a.Channel, a.Price, a.DatePosting, a.DateDelete)
	case models.TypeBuy:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		- <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> %s
		- <b>–ö–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> %s
		- <b>–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		- <b>–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		`, getTextTime(minutesLeftAlert), a.Partner, a.Channel, a.Price, a.DatePosting, a.DateDelete)
	case models.TypeMutual:
		descriptionAdEvent = fmt.Sprintf(`
		–ß–µ—Ä–µ–∑ %s —É –í–∞—Å –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤–∑–∞–∏–º–Ω—ã–π –ø–∏–∞—Ä. –ü–æ–¥—Ä–æ–±–Ω–µ–µ:
		- <b>–ü–∞—Ä—Ç–Ω–µ—Ä –ø–æ –≤–∑–∞–∏–º–Ω–æ–º—É –ø–∏–∞—Ä—É:</b> %s
		- <b>–ö–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø–æ –≤–∑–∞–∏–º–Ω–æ–º—É –ø–∏–∞—Ä—É:</b> %s
		- <b>–¶–µ–Ω–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ø–∏–∞—Ä–∞:</b> %d
		- <b>–î–∞—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		- <b>–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:</b> %s
		`, getTextTime(minutesLeftAlert), a.Partner, a.Channel, a.Price, a.DatePosting, a.DateDelete)
	}

	return descriptionAdEvent
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏.
func getTextTime(minutes int64) string {
	var textTime string
	if minutes/60 < 1 {
		// –ú–∏–Ω—É—Ç—ã
		if minutes == 1 {
			textTime = fmt.Sprintf("<b>%d</b> –º–∏–Ω—É—Ç–∞", minutes)
		} else if minutes >= 2 && minutes <= 4 {
			textTime = fmt.Sprintf("<b>%d</b> –º–∏–Ω—É—Ç—ã", minutes)
		} else {
			textTime = fmt.Sprintf("<b>%d</b> –º–∏–Ω—É—Ç", minutes)
		}
	} else {
		// –ß–∞—Å—ã
		hours := minutes / 60
		switch {
		case hours == 1 || hours == 21:
			textTime = fmt.Sprintf("<b>%d</b> —á–∞—Å", hours)
		case hours >= 2 && hours <= 4 || hours >= 22 && hours <= 24:
			textTime = fmt.Sprintf("<b>%d</b> —á–∞—Å–∞", hours)
		default:
			textTime = fmt.Sprintf("<b>%d</b> —á–∞—Å–æ–≤", hours)
		}
	}

	return textTime
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–∞—Ç—ã.
func getTextExampleDate() (string, error) {
	date, err := sdk.ParseTimeToUserDate(time.Now())
	if err != nil {
		return "", err
	}

	return fmt.Sprintf(`
	–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ –ú–°–ö 'UTC+3'.
	<b>–ü—Ä–∏–º–µ—Ä:</b> %s `, date), nil
}
