package telegram

import (
	"AdaTelegramBot/internal/models"
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/spf13/viper"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞.
type BotTelegram struct {
	bot          *tgbotapi.BotAPI
	db           models.TelegramBotDB
	cashAdEvents map[int64]*models.AdEvent // –•—ç—à-—Ç–∞–±–ª–∏—Ü–∞ ad —Å–æ–±—ã—Ç–∏–π.
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞.
func NewBotTelegram(db models.TelegramBotDB) (*BotTelegram, error) {
	token := viper.GetString("token.telegram")
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}
	bot.Debug = true

	return &BotTelegram{bot: bot, db: db, cashAdEvents: make(map[int64]*models.AdEvent)}, nil
}

// –ó–∞–ø—É—Å–∫ –∞–ø–¥–µ–π—Ç–µ—Ä–∞.
func (b *BotTelegram) StartBotUpdater() error {
	log.Printf("Authorized on account %s", b.bot.Self.UserName)
	updates := b.InitUpdatesChanel()
	if err := b.handlerUpdates(updates); err != nil {
		return err
	}
	return nil
}

func (b *BotTelegram) InitUpdatesChanel() tgbotapi.UpdatesChannel {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 30
	return b.bot.GetUpdatesChan(u)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
func (b *BotTelegram) handlerUpdates(updates tgbotapi.UpdatesChannel) error {
	for update := range updates {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥.
		if update.Message != nil && update.Message.IsCommand() {
			if err := b.handlerCommand(update.Message); err != nil {
				log.Println(err)
			}
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
		if update.Message != nil {
			if err := b.handlerMessage(update.Message); err != nil {
				log.Println(err)
			}
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ CallbackQuery.
		if update.CallbackQuery != nil {
			if err := b.handlerCallbackQuery(&update); err != nil {
				log.Println(err)
			}
			continue
		}
	}

	return fmt.Errorf("updates chanel closed")
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö—ç—à–∞ ad —Å–æ–±—ã—Ç–∏—è.
func getAdEventFromCash(b *BotTelegram, userId int64) (*models.AdEvent, error) {
	adEvent, ok := b.cashAdEvents[userId]
	if ok {
		return adEvent, nil
	}

	if err := sendRestart(b, userId); err != nil {
		return nil, err
	}
	
	return nil, fmt.Errorf("adEvent cache not found")
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ.
func sendRestart(b *BotTelegram, userId int64) error {
	b.db.SetStepUser(userId, "start")
	botMsg := tgbotapi.NewMessage(userId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é /start –ø–æ–≤—Ç–æ—Ä–Ω–æ. ü•≤")
	if _, err := b.bot.Send(botMsg); err != nil {
		return fmt.Errorf("error send message in sendRestartMessage: %w", err)
	}
	return nil
}

// TODO –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞. –ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
// func (b *BotTelegram) cleareAllChat(chatID int64) error {
// 	deleteMsg := tgbotapi.NewDeleteMessage(chatID, 0)
// 	if _, err := b.bot.Send(deleteMsg); err != nil {
// 		return fmt.Errorf("error cleare all chat: %w", err)
// 	}
// 	return nil
// }
