package telegram

import (
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/spf13/viper"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥.
func (b *BotTelegram) handlerCommand(msg *tgbotapi.Message) error {
	switch msg.Command() {
	case "start":
		if err := b.cmdStart(msg); err != nil {
			return err
		}
		return nil
	default:
		if err := b.handlerMessage(msg); err != nil {
			return err
		}
		// botMsg := tgbotapi.NewMessage(userId, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü•≤`)
		// if err := b.sendMessage(userId, botMsg); err != nil {
		// 	return fmt.Errorf("error send unknow command error: %w", err)
		// }
		return nil
	}
}

// –ö–æ–º–∞–Ω–¥–∞ /start
func (b *BotTelegram) cmdStart(msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	if err := b.db.DefaultUserCreation(msg.Chat.ID, msg.Chat.UserName, msg.Chat.FirstName); err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã.
	if err := b.sendAdMessage(userId); err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é /start.
	if err := b.sendStartMessage(userId); err != nil {
		return err
	}

	// –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞.
	if err := b.cleareAllChat(userId); err != nil {
		return err
	}

	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ startMessage.
func (b *BotTelegram) sendStartMessage(userId int64) error {
	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	if err := b.db.SetStepUser(userId, "start"); err != nil {
		return err
	}

	text := `üìì –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –ê–¥–∞:`
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏.", "ad_event"),
		),
		// tgbotapi.NewInlineKeyboardRow(
		// 	tgbotapi.NewInlineKeyboardButtonData("–ë–∏—Ä–∂–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π.", "exchange"),
		// ),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.", "statistics"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞.", "help"),
		),
	)

	// –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ startMessage.
	startmessageId, err := b.db.GetStartmessageId(userId)
	if err != nil {
		if err := updateStartMessage(b, userId, startmessageId, keyboard, text); err != nil {
			return err
		}
		return nil
	}

	// –ò–∑–º–µ–Ω–µ–Ω–∏–µ startMenu.
	if err := editMessageReplyMarkup(b, userId, startmessageId, keyboard, text); err != nil {
		// –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç –º–µ–Ω—é.
		if err := updateStartMessage(b, userId, startmessageId, keyboard, text); err != nil {
			return err
		}
	}

	return nil
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ startMessage.
func updateStartMessage(b *BotTelegram, userId int64, startmessageId int, keyboard tgbotapi.InlineKeyboardMarkup, text string) error {
	botMsg := tgbotapi.NewMessage(userId, text)
	botMsg.ReplyMarkup = keyboard

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ startMessage.
	newStartMessage, err := b.bot.Send(botMsg)
	if err != nil {
		return fmt.Errorf("error send new startMessage: %w", err)
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä–æ–≥–æ startMessage.
	b.cleareMessage(userId, startmessageId)

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ startMessage.
	if err := b.db.UpdateStartmessageId(userId, newStartMessage.MessageID); err != nil {
		return err
	}

	return nil
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ adMessage.
func (b *BotTelegram) sendAdMessage(userId int64) error {
	text := `üìì –†–µ–∫–ª–∞–º–∞: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º—É –∫–∞–Ω–∞–ª—É @ammka22`
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–°–ø–∞—Å–∏–±–æ!", "ad"),
		),
	)

	// –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–ª—É—á–µ–Ω–∏–µ adMessage.
	admessageId, err := b.db.GetAdmessageId(userId)
	if err != nil {
		if err := updateAdMessage(b, userId, admessageId, keyboard, text); err != nil {
			return err
		}
		return nil
	}

	// –ò–∑–º–µ–Ω–µ–Ω–∏–µ adMessage.
	if err := editMessageReplyMarkup(b, userId, admessageId, keyboard, text); err != nil {
		// –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç –º–µ–Ω—é.
		if err := updateAdMessage(b, userId, admessageId, keyboard, text); err != nil {
			return err
		}
	}

	return nil
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ adMessage.
func updateAdMessage(b *BotTelegram, userId int64, admessageId int, keyboard tgbotapi.InlineKeyboardMarkup, text string) error {
	botMsg := tgbotapi.NewMessage(userId, text)
	botMsg.ReplyMarkup = keyboard

	if viper.GetBool("ada_bot.adMessage") {
		// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ adMessage.
		newAdMessage, err := b.bot.Send(botMsg)
		if err != nil {
			return fmt.Errorf("error send new adMessage: %w", err)
		}

		// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ adMessage.
		if err := b.db.UpdateAdmessageId(userId, newAdMessage.MessageID); err != nil {
			return err
		}
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä–æ–≥–æ adMessage.
	b.cleareMessage(userId, admessageId)

	return nil
}
