package telegram

import (
	"AdaTelegramBot/internal/models"
	"fmt"
	"regexp"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
func (b *BotTelegram) handlerMessage(msg *tgbotapi.Message) error {
	userId := msg.Chat.ID
	step, err := b.db.GetStepUser(userId)
	if err != nil {
		return err
	}

	// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—é—Ç—Å—è –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—è—Å—å –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	switch step {
	case "ad_event.partner":
		if err := adEventPartner(b, msg); err != nil {
			return err
		}
	case "ad_event.chanel":
		if err := adEventChanel(b, msg); err != nil {
			return err
		}
	case "ad_event.price":
		if err := adEventPrice(b, msg); err != nil {
			return err
		}
	case "ad_event.date_posting":
		if err := adEventDatePosting(b, msg); err != nil {
			return err
		}
	case "ad_event.date_delete":
		if err := adEventDateDelete(b, msg); err != nil {
			return err
		}
	default:
		botMsg := tgbotapi.NewMessage(userId, "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ... üòî")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}

	}

	return nil
}

// step: ad_event.partner
func adEventPartner(b *BotTelegram, msg *tgbotapi.Message) error {
	// Example: https://t.me/nikname ; @nikname
	regxType1 := regexp.MustCompile(`^https:\/\/t\.me\/[a-zA-Z0-9_]+$`)
	regxType2 := regexp.MustCompile(`^@[a-zA-Z0-9_]+$`)
	userId := msg.Chat.ID

	if !regxType1.MatchString(msg.Text) && !regxType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(userId, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: @AdaTelegramBot –∏–ª–∏ https://t.me/AdaTelegramBot")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–Ω—ã–π —Ç–∏–ø.
	if regxType2.MatchString(msg.Text) {
		msg.Text = "https://t.me/" + msg.Text[1:]
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	adEvent.Partner = msg.Text
	b.db.SetStepUser(msg.Chat.ID, "ad_event.chanel")

	switch adEvent.Type {
	case "sale":
		botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π –∫–∞–Ω–∞–ª.")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	case "buy":
		botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã–π–¥–µ—Ç —Ç–≤–æ—è —Ä–µ–∫–ª–∞–º–∞.")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
	default:
		if err := sendRestart(b, userId); err != nil {
			return err
		}
		return fmt.Errorf("unknow type adEvent")
	}

	return nil
}

// step: ad_event.chanel
func adEventChanel(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxUrlType1.MatchString(msg.Text) && !models.RegxUrlType2.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: @AdaTelegramBot –∏–ª–∏ https://t.me/AdaTelegramBot")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–Ω—ã–π —Ç–∏–ø.
	if models.RegxUrlType1.MatchString(msg.Text) {
		msg.Text = "https://t.me/" + msg.Text[1:]
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	adEvent.Channel = msg.Text

	if adEvent.Type == "mutual" {
		b.db.SetStepUser(msg.Chat.ID, "ad_event.date_posting")
	} else {
		b.db.SetStepUser(msg.Chat.ID, "ad_event.price")
	}

	botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

// step: ad_event.price
func adEventPrice(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxPrice.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: 1000")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	price, err := strconv.ParseInt(msg.Text, 0, 64)
	if err != nil {
		return err
	}

	adEvent.Price = price
	b.db.SetStepUser(msg.Chat.ID, "ad_event.date_posting")

	botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã. –§–æ—Ä–º–∞—Ç `22.08.2022 16:30`")
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

// step: ad_event.date_posting
func adEventDatePosting(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: 22.08.2022 16:30")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	adEvent.DatePosting = msg.Text
	b.db.SetStepUser(msg.Chat.ID, "ad_event.date_delete")

	botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã. –§–æ—Ä–º–∞—Ç `22.08.2022 16:30`")
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}

// step: ad_event.date_delete
func adEventDateDelete(b *BotTelegram, msg *tgbotapi.Message) error {
	userId := msg.Chat.ID

	if !models.RegxAdEventDate.MatchString(msg.Text) {
		botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –ü—Ä–∏–º–µ—Ä: 22.08.2022 16:30")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ ad —Å–æ–±—ã—Ç–∏–π.
	adEvent, err := getAdEventFromCash(b, userId)
	if err != nil {
		return err
	}

	adEvent.DateDelete = msg.Text

	// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å—Ç–∏–Ω–≥–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è.
	durationDatePosting, err := models.ParseDateToTime(adEvent.DatePosting)
	if err != nil {
		return fmt.Errorf("error parse durationDatePosting: %w", err)
	}

	durationDateDelete, err := models.ParseDateToTime(adEvent.DateDelete)
	if err != nil {
		return fmt.Errorf("error parse durationDateDelete: %w", err)
	}

	if durationDateDelete.Sub(*durationDatePosting) <= 0 {
		botMsg := tgbotapi.NewMessage(msg.Chat.ID, "–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –º–µ–Ω—å—à–µ –¥–∞—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		if err := b.sendMessage(userId, botMsg); err != nil {
			return err
		}
		return nil
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–¥.
	if !adEvent.AllData() {
		return fmt.Errorf("adEvent have not full data")
	}

	adEventId, err := b.db.AdEventCreation(adEvent)
	if err != nil {
		return err
	}

	b.db.SetStepUser(msg.Chat.ID, "start")

	botMsgString := fmt.Sprintf("–û—Ç–ª–∏—á–Ω–æ! –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ò–Ω–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è: %d.", adEventId)
	botMsg := tgbotapi.NewMessage(msg.Chat.ID, botMsgString)
	if err := b.sendMessage(userId, botMsg); err != nil {
		return err
	}

	return nil
}
